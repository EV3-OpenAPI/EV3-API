openapi: 3.0.3
info:
  title: EV3-REST
  description: EV3-REST
  version: 0.1.0
servers:
  - url: 'http://127.0.0.1:8080/api/v1'

tags:
  - name: power
  - name: motor
  - name: sensor
  - name: sound
paths:
  '/power':
    get:
      tags:
        - power
      description: 'Get power info'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerInfo'

  '/motor/tacho':
    post:
      tags:
        - motor
      description: 'Set motor parameters'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotorRequest'
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'Motor not found'
  '/motor/tacho/{type}/{port}':
    get:
      tags:
        - motor
      description: 'Get information about this motor'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: port
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TachoMotorInfo'
        '404':
           description: 'Motor not found'
  '/motor/tacho/{type}/command':
    post:
      tags:
        - motor
      description: 'Set the desired state for the motor'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'Command to be executed'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ports:
                  type: array
                  items:
                    type: string
                command:
                  type: string
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'Motor not found'
  '/motor/tacho/{type}/max_speed':
    post:
      tags:
        - motor
      description: 'Set the desired state for the motor'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'Command to be executed'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ports:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'Motor not found'
  '/motor/tacho/{type}/speed_setpoint':
    post:
      tags:
        - motor
      description: 'Set the desired state for the motor'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'Command to be executed'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ports:
                  type: array
                  items:
                    type: string
                setpoint:
                  type: integer
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'Motor not found'

  '/motor/stopAll':
    post:
      tags:
        - motor
      description: 'Stops all connected motors'
      responses:
        '200':
          description: 'Success'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  '/sound/tone':
    post:
      tags:
        - sound
      requestBody:
        description: 'Tone to be played'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tone'
      responses:
        '200':
          description: 'Tone successfully played'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  '/sound/tones':
    post:
      tags:
        - sound
      requestBody:
        description: 'Array of tones to be played'
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tone'
      responses:
        '200':
          description: 'Tone successfully played'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

components:
  schemas:
    Tone:
      type: object
      properties:
        frequency:
          type: integer
        length_ms:
          type: integer

    Motor:
      type: object
      properties:
        size:
          type: string
          enum:
            - s
            - m
            - l
        port:
          type: string

    MotorRequest:
      type: object
      properties:
        motors:
          type: array
          items:
            $ref: '#/components/schemas/Motor'
        speed:
          type: integer
        command:
          type: string
          enum:
            - run-forever
            - run-to-abs-pos
            - run-to-rel-pos
            - run-timed
            - run-direct
            - stop
            - reset
        stop-action:
          type: string
          enum:
            - coast
            - brake
            - hold

    TachoMotorInfo:
      type: object
      properties:
        commnds:
          type: array
          items:
            type: string
        stop_actions:
          type: array
          items:
            type: string
        count_per_rot:
          type: integer
        duty_cycle:
          type: integer
        duty_cycle_setpoint:
          type: integer
        polarity:
          type: string
        position:
          type: integer
        hold_PID_kd:
          type: integer
        hold_PID_ki:
          type: integer
        hold_PID_kp:
          type: integer
        max_speed:
          type: integer
        position_setpoint:
          type: integer
        current_speed:
          type: integer
        current_speed_setpoint:
          type: integer
        current_ramp_up_setpoint:
          type: integer
        current_ramp_down_setpoint:
          type: integer
        speed_PID_kd:
          type: integer
        speed_PID_ki:
          type: integer
        speed_PID_kp:
          type: integer
        state:
          type: integer
        time_setpoint:
          type: integer

    PowerInfo:
      type: object
      properties:
        voltage:
          type: number
          description: Voltage returns voltage measured from the power supply in volts.
        current:
          type: number
          description: Current returns the current drawn from the power supply in milliamps.
        voltage_max:
          type: number
          description: VoltageMax returns the maximum design voltage for the power supply in volts.
        voltage_min:
          type: number
          description: VoltageMin returns the minimum design voltage for the power supply in volts.
        technology:
          type: string
          description: Technology returns the battery technology of the power supply.
        type:
          type: string
          description: Type returns the battery type of the power supply.
        u_event:
          type: object
          description: Uevent returns the current uevent state for the power supply.
          additionalProperties:
            type: string
