openapi: 3.0.3
info:
  title: EV3-REST
  description: EV3-REST
  version: 0.1.0
servers:
  - url: 'http://127.0.0.1:8080/api/v1'

tags:
  - name: button
  - name: led
  - name: motor
  - name: power
  - name: sensor
  - name: sound
paths:
### Button
  '/button/pressed':
    get:
      tags:
        - button
      description: 'Get list of buttons currently pressed'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string


### LED
  /led/flash:
    post:
      tags:
        - led
      description: '' # TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LED'
      responses:
        200:
          description: '' # TODO

  /led/off:
    post:
      tags:
        - led
      description: '' # TODO
      responses:
        200:
          description: '' # TODO


### Motor
  '/motor/tacho':
    get:
      tags:
        - motor
      description: 'Get information about all connected motors'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TachoMotor'
    post:
      tags:
        - motor
      description: 'Set motor parameters'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TachoMotor'
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'Motor not found'

  '/motor/tacho/{type}/{port}':
    get:
      tags:
        - motor
      description: 'Get information about this motor'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: port
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TachoMotor'
        '404':
           description: 'Motor not found'

  '/motor/stopAll':
    post:
      tags:
        - motor
      description: 'Stops all connected motors'
      responses:
        '200':
          description: 'Success'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  /motor/steer/reset:
    post:
      tags:
        - motor
      description: 'Reset steering unit'
      responses:
        '200':
          description: 'Success'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  /motor/steer/counts:
    post:
      tags:
        - motor
      description: 'Steers in the given turn for the given tacho counts and at the specified speed.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                steering_unit:
                  $ref: '#/components/schemas/SteeringUnit'
                speed:
                  type: integer
                turn:
                  type: integer
                  description: 'The valid range of turn is -100 (hard left) to +100 (hard right)'
                counts:
                  type: integer
      responses:
        '200':
          description: 'Success'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  /motor/steer/duration:
    post:
      tags:
        - motor
      description: 'Steers in the given turn for the given duration and at the specified speed'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                steering_unit:
                  $ref: '#/components/schemas/SteeringUnit'
                speed:
                  type: integer
                turn:
                  type: integer
                  description: 'The valid range of turn is -100 (hard left) to +100 (hard right)'
                duration_ms:
                  type: integer
      responses:
        '200':
          description: 'Success'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'


### Power
  '/power':
    get:
      tags:
        - power
      description: 'Get power info'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerInfo'


### Sensors
  /sensor:
    get:
      tags:
        - sensor
      description: 'Get information about the sensor'
      responses:
        200:
          description: 'List of all connected sensors'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'

  /sensor/{type}:
    get:
      tags:
        - sensor
      description: 'Get details about a specific sensor'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Details of sensors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
    put:
      tags:
        - sensor
      description: 'update a sensor with specific values'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
      responses:
        200:
          description: 'Sensor successfully updated'

  /sensor/{type}/values:
    get:
      tags:
        - sensor
      description: 'Get the values about a specific sensor'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Sensor of that type is successfully found'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: 'Sensor of that type not found'

  /sensor/{type}/text_values:
    get:
      tags:
        - sensor
      description: 'Get the values about a specific sensor in textformat'
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Values in textformat is successfully found'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: 'Sensor of that type not found'


  ### Sounds
  '/sound/beep':
    post:
      tags:
        - sound
      description: 'Output of the roboter is a beep sound'
      responses:
        '200':
          description: 'Beep successfully played'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  '/sound/speak':
    post:
      tags:
        - sound
      description: 'Output from the roboter is a spoken text'
      requestBody:
        description: 'A JSON object containing text'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Text'
      responses:
        '200':
          description: 'Text successfully spoken'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  '/sound/tone':
    post:
      tags:
        - sound
      requestBody:
        description: 'A JSON object containing tone'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tone'
      responses:
        '200':
          description: 'Tone successfully played'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

  '/sound/tones':
    post:
      tags:
        - sound
      description: 'Output from the roboter are played tones'
      requestBody:
        description: 'Array of tones to be played'
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tone'
      responses:
        '200':
          description: 'Tone successfully played'
        '400':
          description: 'Client error'
        '500':
          description: 'Server error'

components:
  schemas:
    LED:
      type: object
      properties:
        side:
          type: string
        red:
          type: integer
        green:
          type: integer
        color:
          type: string
          enum:
            - red
            - orange
            - yellow
            - lime
            - green

    Tone:
      type: object
      properties:
        frequency:
          type: integer
          description: 'frequency'
        length_ms:
          type: integer
          description: 'length in ms'

    Text:
      type: object
      properties:
        text:
          type: string
          description: ''

    Sensor:
      type: object
      properties:
        type:
          type: string
          readOnly: true
          description: 'Sensor information are read only and from type string'
        driver_name:
          type: string
          readOnly: true
          description: 'Sensor driver_name information is read only and from type string'
        port:
          type: string
          readOnly: true
          description: 'Sensor portnumber is read only and from type string'
        modes:
          type: array
          readOnly: true
          description: 'Sensor modes information are read only and in a array'
          items:
            type: string
        commands:
          type: array
          readOnly: true
          description: 'Sensor commands are in a array'
          items:
            type: string
        mode:
          type: string
          description: 'Sensor mode'
        decimals:
          type: integer
          readOnly: true
          description: ''
        poll_rate_ms:
          type: integer
          description: '' # TODO
        units:
          type: string
          readOnly: true
          description: '' # TODO

    SteeringUnit:
      type: object
      properties:
        left:
          $ref: '#/components/schemas/TachoMotor'
        right:
          $ref: '#/components/schemas/TachoMotor'

    TachoMotor:
      type: object
      properties:
        size:
          type: string
          description: '' # TODO
          enum:
            - s
            - m
            - l
        port:
          type: string
          description: '' # TODO
          enum:
            - A
            - B
            - C
            - D
        commands:
          type: array
          readOnly: true
          items:
            type: string
        stop_actions:
          type: array
          readOnly: true
          items:
            type: string
        count_per_rot:
          type: integer
          readOnly: true
        duty_cycle:
          type: integer
          readOnly: true
        duty_cycle_setpoint:
          type: integer
        polarity:
          type: string
        position:
          type: integer
          readOnly: true
        hold_PID_kd:
          type: integer
          readOnly: true
        hold_PID_ki:
          type: integer
          readOnly: true
        hold_PID_kp:
          type: integer
          readOnly: true
        max_speed:
          type: integer
          readOnly: true
        position_setpoint:
          type: integer
        speed:
          type: integer
        speed_pct:
          type: integer
        speed_setpoint:
          type: integer
        ramp_up_setpoint:
          type: integer
        ramp_down_setpoint:
          type: integer
        speed_PID_kd:
          type: integer
        speed_PID_ki:
          type: integer
        speed_PID_kp:
          type: integer
        state:
          type: integer
        time_setpoint:
          type: integer
        command:
          type: string
          enum:
            - run-forever
            - run-to-abs-pos
            - run-to-rel-pos
            - run-timed
            - run-direct
            - stop
            - reset
        stop-action:
          type: string
          enum:
            - coast
            - brake
            - hold

    PowerInfo:
      type: object
      properties:
        voltage:
          type: number
          readOnly: true
          description: Voltage returns voltage measured from the power supply in volts.
        current:
          type: number
          readOnly: true
          description: Current returns the current drawn from the power supply in milliamps.
        voltage_max:
          type: number
          readOnly: true
          description: VoltageMax returns the maximum design voltage for the power supply in volts.
        voltage_min:
          type: number
          readOnly: true
          description: VoltageMin returns the minimum design voltage for the power supply in volts.
        technology:
          type: string
          readOnly: true
          description: Technology returns the battery technology of the power supply.
        type:
          type: string
          readOnly: true
          description: Type returns the battery type of the power supply.
        u_event:
          type: object
          readOnly: true
          description: Uevent returns the current uevent state for the power supply.
          additionalProperties:
            type: string
