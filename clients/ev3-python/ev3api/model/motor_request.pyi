# coding: utf-8

"""
    EV3-REST

    EV3-REST  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ev3api import schemas  # noqa: F401


class MotorRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class motors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Motor']:
                        return Motor
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Motor'], typing.List['Motor']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'motors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Motor':
                    return super().__getitem__(i)
            speed = schemas.IntSchema
            speed_pct = schemas.IntSchema
            polarity = schemas.StrSchema
            position = schemas.IntSchema
            time = schemas.IntSchema
            position_setpoint = schemas.IntSchema
            ramp_up_setpoint = schemas.IntSchema
            ramp_down_setpoint = schemas.IntSchema
            hold_PID_kd = schemas.IntSchema
            hold_PID_ki = schemas.IntSchema
            hold_PID_kp = schemas.IntSchema
            speed_PID_kd = schemas.IntSchema
            speed_PID_ki = schemas.IntSchema
            speed_PID_kp = schemas.IntSchema
            
            
            class command(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def RUNFOREVER(cls):
                    return cls("run-forever")
                
                @schemas.classproperty
                def RUNTOABSPOS(cls):
                    return cls("run-to-abs-pos")
                
                @schemas.classproperty
                def RUNTORELPOS(cls):
                    return cls("run-to-rel-pos")
                
                @schemas.classproperty
                def RUNTIMED(cls):
                    return cls("run-timed")
                
                @schemas.classproperty
                def RUNDIRECT(cls):
                    return cls("run-direct")
                
                @schemas.classproperty
                def STOP(cls):
                    return cls("stop")
                
                @schemas.classproperty
                def RESET(cls):
                    return cls("reset")
            
            
            class stop_action(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COAST(cls):
                    return cls("coast")
                
                @schemas.classproperty
                def BRAKE(cls):
                    return cls("brake")
                
                @schemas.classproperty
                def HOLD(cls):
                    return cls("hold")
            __annotations__ = {
                "motors": motors,
                "speed": speed,
                "speed_pct": speed_pct,
                "polarity": polarity,
                "position": position,
                "time": time,
                "position_setpoint": position_setpoint,
                "ramp_up_setpoint": ramp_up_setpoint,
                "ramp_down_setpoint": ramp_down_setpoint,
                "hold_PID_kd": hold_PID_kd,
                "hold_PID_ki": hold_PID_ki,
                "hold_PID_kp": hold_PID_kp,
                "speed_PID_kd": speed_PID_kd,
                "speed_PID_ki": speed_PID_ki,
                "speed_PID_kp": speed_PID_kp,
                "command": command,
                "stop-action": stop_action,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motors"]) -> MetaOapg.properties.motors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed"]) -> MetaOapg.properties.speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_pct"]) -> MetaOapg.properties.speed_pct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polarity"]) -> MetaOapg.properties.polarity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position_setpoint"]) -> MetaOapg.properties.position_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ramp_up_setpoint"]) -> MetaOapg.properties.ramp_up_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ramp_down_setpoint"]) -> MetaOapg.properties.ramp_down_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hold_PID_kd"]) -> MetaOapg.properties.hold_PID_kd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hold_PID_ki"]) -> MetaOapg.properties.hold_PID_ki: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hold_PID_kp"]) -> MetaOapg.properties.hold_PID_kp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_PID_kd"]) -> MetaOapg.properties.speed_PID_kd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_PID_ki"]) -> MetaOapg.properties.speed_PID_ki: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_PID_kp"]) -> MetaOapg.properties.speed_PID_kp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["command"]) -> MetaOapg.properties.command: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop-action"]) -> MetaOapg.properties.stop_action: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["motors", "speed", "speed_pct", "polarity", "position", "time", "position_setpoint", "ramp_up_setpoint", "ramp_down_setpoint", "hold_PID_kd", "hold_PID_ki", "hold_PID_kp", "speed_PID_kd", "speed_PID_ki", "speed_PID_kp", "command", "stop-action", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motors"]) -> typing.Union[MetaOapg.properties.motors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed"]) -> typing.Union[MetaOapg.properties.speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_pct"]) -> typing.Union[MetaOapg.properties.speed_pct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polarity"]) -> typing.Union[MetaOapg.properties.polarity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position_setpoint"]) -> typing.Union[MetaOapg.properties.position_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ramp_up_setpoint"]) -> typing.Union[MetaOapg.properties.ramp_up_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ramp_down_setpoint"]) -> typing.Union[MetaOapg.properties.ramp_down_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hold_PID_kd"]) -> typing.Union[MetaOapg.properties.hold_PID_kd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hold_PID_ki"]) -> typing.Union[MetaOapg.properties.hold_PID_ki, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hold_PID_kp"]) -> typing.Union[MetaOapg.properties.hold_PID_kp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_PID_kd"]) -> typing.Union[MetaOapg.properties.speed_PID_kd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_PID_ki"]) -> typing.Union[MetaOapg.properties.speed_PID_ki, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_PID_kp"]) -> typing.Union[MetaOapg.properties.speed_PID_kp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["command"]) -> typing.Union[MetaOapg.properties.command, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop-action"]) -> typing.Union[MetaOapg.properties.stop_action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["motors", "speed", "speed_pct", "polarity", "position", "time", "position_setpoint", "ramp_up_setpoint", "ramp_down_setpoint", "hold_PID_kd", "hold_PID_ki", "hold_PID_kp", "speed_PID_kd", "speed_PID_ki", "speed_PID_kp", "command", "stop-action", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        motors: typing.Union[MetaOapg.properties.motors, list, tuple, schemas.Unset] = schemas.unset,
        speed: typing.Union[MetaOapg.properties.speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_pct: typing.Union[MetaOapg.properties.speed_pct, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        polarity: typing.Union[MetaOapg.properties.polarity, str, schemas.Unset] = schemas.unset,
        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        position_setpoint: typing.Union[MetaOapg.properties.position_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ramp_up_setpoint: typing.Union[MetaOapg.properties.ramp_up_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ramp_down_setpoint: typing.Union[MetaOapg.properties.ramp_down_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hold_PID_kd: typing.Union[MetaOapg.properties.hold_PID_kd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hold_PID_ki: typing.Union[MetaOapg.properties.hold_PID_ki, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hold_PID_kp: typing.Union[MetaOapg.properties.hold_PID_kp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_PID_kd: typing.Union[MetaOapg.properties.speed_PID_kd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_PID_ki: typing.Union[MetaOapg.properties.speed_PID_ki, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_PID_kp: typing.Union[MetaOapg.properties.speed_PID_kp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        command: typing.Union[MetaOapg.properties.command, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MotorRequest':
        return super().__new__(
            cls,
            *_args,
            motors=motors,
            speed=speed,
            speed_pct=speed_pct,
            polarity=polarity,
            position=position,
            time=time,
            position_setpoint=position_setpoint,
            ramp_up_setpoint=ramp_up_setpoint,
            ramp_down_setpoint=ramp_down_setpoint,
            hold_PID_kd=hold_PID_kd,
            hold_PID_ki=hold_PID_ki,
            hold_PID_kp=hold_PID_kp,
            speed_PID_kd=speed_PID_kd,
            speed_PID_ki=speed_PID_ki,
            speed_PID_kp=speed_PID_kp,
            command=command,
            _configuration=_configuration,
            **kwargs,
        )

from ev3api.model.motor import Motor
