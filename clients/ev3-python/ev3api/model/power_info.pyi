# coding: utf-8

"""
    EV3-REST

    EV3-REST  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ev3api import schemas  # noqa: F401


class PowerInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            voltage = schemas.NumberSchema
            current = schemas.NumberSchema
            voltage_max = schemas.NumberSchema
            voltage_min = schemas.NumberSchema
            technology = schemas.StrSchema
            type = schemas.StrSchema
            
            
            class u_event(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'u_event':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "voltage": voltage,
                "current": current,
                "voltage_max": voltage_max,
                "voltage_min": voltage_min,
                "technology": technology,
                "type": type,
                "u_event": u_event,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltage"]) -> MetaOapg.properties.voltage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current"]) -> MetaOapg.properties.current: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltage_max"]) -> MetaOapg.properties.voltage_max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltage_min"]) -> MetaOapg.properties.voltage_min: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["technology"]) -> MetaOapg.properties.technology: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["u_event"]) -> MetaOapg.properties.u_event: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["voltage", "current", "voltage_max", "voltage_min", "technology", "type", "u_event", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltage"]) -> typing.Union[MetaOapg.properties.voltage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current"]) -> typing.Union[MetaOapg.properties.current, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltage_max"]) -> typing.Union[MetaOapg.properties.voltage_max, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltage_min"]) -> typing.Union[MetaOapg.properties.voltage_min, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["technology"]) -> typing.Union[MetaOapg.properties.technology, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["u_event"]) -> typing.Union[MetaOapg.properties.u_event, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["voltage", "current", "voltage_max", "voltage_min", "technology", "type", "u_event", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        voltage: typing.Union[MetaOapg.properties.voltage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        current: typing.Union[MetaOapg.properties.current, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voltage_max: typing.Union[MetaOapg.properties.voltage_max, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voltage_min: typing.Union[MetaOapg.properties.voltage_min, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        technology: typing.Union[MetaOapg.properties.technology, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        u_event: typing.Union[MetaOapg.properties.u_event, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PowerInfo':
        return super().__new__(
            cls,
            *_args,
            voltage=voltage,
            current=current,
            voltage_max=voltage_max,
            voltage_min=voltage_min,
            technology=technology,
            type=type,
            u_event=u_event,
            _configuration=_configuration,
            **kwargs,
        )
