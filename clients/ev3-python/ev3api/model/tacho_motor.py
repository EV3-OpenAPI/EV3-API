# coding: utf-8

"""
    EV3-REST

    EV3-REST  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ev3api import schemas  # noqa: F401


class TachoMotor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class commnds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'commnds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class stop_actions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stop_actions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            count_per_rot = schemas.IntSchema
            duty_cycle = schemas.IntSchema
            duty_cycle_setpoint = schemas.IntSchema
            polarity = schemas.StrSchema
            position = schemas.IntSchema
            hold_PID_kd = schemas.IntSchema
            hold_PID_ki = schemas.IntSchema
            hold_PID_kp = schemas.IntSchema
            max_speed = schemas.IntSchema
            position_setpoint = schemas.IntSchema
            current_speed = schemas.IntSchema
            current_speed_setpoint = schemas.IntSchema
            current_ramp_up_setpoint = schemas.IntSchema
            current_ramp_down_setpoint = schemas.IntSchema
            speed_PID_kd = schemas.IntSchema
            speed_PID_ki = schemas.IntSchema
            speed_PID_kp = schemas.IntSchema
            state = schemas.IntSchema
            time_setpoint = schemas.IntSchema
            __annotations__ = {
                "commnds": commnds,
                "stop_actions": stop_actions,
                "count_per_rot": count_per_rot,
                "duty_cycle": duty_cycle,
                "duty_cycle_setpoint": duty_cycle_setpoint,
                "polarity": polarity,
                "position": position,
                "hold_PID_kd": hold_PID_kd,
                "hold_PID_ki": hold_PID_ki,
                "hold_PID_kp": hold_PID_kp,
                "max_speed": max_speed,
                "position_setpoint": position_setpoint,
                "current_speed": current_speed,
                "current_speed_setpoint": current_speed_setpoint,
                "current_ramp_up_setpoint": current_ramp_up_setpoint,
                "current_ramp_down_setpoint": current_ramp_down_setpoint,
                "speed_PID_kd": speed_PID_kd,
                "speed_PID_ki": speed_PID_ki,
                "speed_PID_kp": speed_PID_kp,
                "state": state,
                "time_setpoint": time_setpoint,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commnds"]) -> MetaOapg.properties.commnds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop_actions"]) -> MetaOapg.properties.stop_actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_per_rot"]) -> MetaOapg.properties.count_per_rot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duty_cycle"]) -> MetaOapg.properties.duty_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duty_cycle_setpoint"]) -> MetaOapg.properties.duty_cycle_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polarity"]) -> MetaOapg.properties.polarity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hold_PID_kd"]) -> MetaOapg.properties.hold_PID_kd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hold_PID_ki"]) -> MetaOapg.properties.hold_PID_ki: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hold_PID_kp"]) -> MetaOapg.properties.hold_PID_kp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_speed"]) -> MetaOapg.properties.max_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position_setpoint"]) -> MetaOapg.properties.position_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_speed"]) -> MetaOapg.properties.current_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_speed_setpoint"]) -> MetaOapg.properties.current_speed_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_ramp_up_setpoint"]) -> MetaOapg.properties.current_ramp_up_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_ramp_down_setpoint"]) -> MetaOapg.properties.current_ramp_down_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_PID_kd"]) -> MetaOapg.properties.speed_PID_kd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_PID_ki"]) -> MetaOapg.properties.speed_PID_ki: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed_PID_kp"]) -> MetaOapg.properties.speed_PID_kp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_setpoint"]) -> MetaOapg.properties.time_setpoint: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commnds", "stop_actions", "count_per_rot", "duty_cycle", "duty_cycle_setpoint", "polarity", "position", "hold_PID_kd", "hold_PID_ki", "hold_PID_kp", "max_speed", "position_setpoint", "current_speed", "current_speed_setpoint", "current_ramp_up_setpoint", "current_ramp_down_setpoint", "speed_PID_kd", "speed_PID_ki", "speed_PID_kp", "state", "time_setpoint", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commnds"]) -> typing.Union[MetaOapg.properties.commnds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop_actions"]) -> typing.Union[MetaOapg.properties.stop_actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_per_rot"]) -> typing.Union[MetaOapg.properties.count_per_rot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duty_cycle"]) -> typing.Union[MetaOapg.properties.duty_cycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duty_cycle_setpoint"]) -> typing.Union[MetaOapg.properties.duty_cycle_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polarity"]) -> typing.Union[MetaOapg.properties.polarity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hold_PID_kd"]) -> typing.Union[MetaOapg.properties.hold_PID_kd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hold_PID_ki"]) -> typing.Union[MetaOapg.properties.hold_PID_ki, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hold_PID_kp"]) -> typing.Union[MetaOapg.properties.hold_PID_kp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_speed"]) -> typing.Union[MetaOapg.properties.max_speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position_setpoint"]) -> typing.Union[MetaOapg.properties.position_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_speed"]) -> typing.Union[MetaOapg.properties.current_speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_speed_setpoint"]) -> typing.Union[MetaOapg.properties.current_speed_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_ramp_up_setpoint"]) -> typing.Union[MetaOapg.properties.current_ramp_up_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_ramp_down_setpoint"]) -> typing.Union[MetaOapg.properties.current_ramp_down_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_PID_kd"]) -> typing.Union[MetaOapg.properties.speed_PID_kd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_PID_ki"]) -> typing.Union[MetaOapg.properties.speed_PID_ki, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed_PID_kp"]) -> typing.Union[MetaOapg.properties.speed_PID_kp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_setpoint"]) -> typing.Union[MetaOapg.properties.time_setpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commnds", "stop_actions", "count_per_rot", "duty_cycle", "duty_cycle_setpoint", "polarity", "position", "hold_PID_kd", "hold_PID_ki", "hold_PID_kp", "max_speed", "position_setpoint", "current_speed", "current_speed_setpoint", "current_ramp_up_setpoint", "current_ramp_down_setpoint", "speed_PID_kd", "speed_PID_ki", "speed_PID_kp", "state", "time_setpoint", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        commnds: typing.Union[MetaOapg.properties.commnds, list, tuple, schemas.Unset] = schemas.unset,
        stop_actions: typing.Union[MetaOapg.properties.stop_actions, list, tuple, schemas.Unset] = schemas.unset,
        count_per_rot: typing.Union[MetaOapg.properties.count_per_rot, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        duty_cycle: typing.Union[MetaOapg.properties.duty_cycle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        duty_cycle_setpoint: typing.Union[MetaOapg.properties.duty_cycle_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        polarity: typing.Union[MetaOapg.properties.polarity, str, schemas.Unset] = schemas.unset,
        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hold_PID_kd: typing.Union[MetaOapg.properties.hold_PID_kd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hold_PID_ki: typing.Union[MetaOapg.properties.hold_PID_ki, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hold_PID_kp: typing.Union[MetaOapg.properties.hold_PID_kp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_speed: typing.Union[MetaOapg.properties.max_speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        position_setpoint: typing.Union[MetaOapg.properties.position_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_speed: typing.Union[MetaOapg.properties.current_speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_speed_setpoint: typing.Union[MetaOapg.properties.current_speed_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_ramp_up_setpoint: typing.Union[MetaOapg.properties.current_ramp_up_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_ramp_down_setpoint: typing.Union[MetaOapg.properties.current_ramp_down_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_PID_kd: typing.Union[MetaOapg.properties.speed_PID_kd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_PID_ki: typing.Union[MetaOapg.properties.speed_PID_ki, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speed_PID_kp: typing.Union[MetaOapg.properties.speed_PID_kp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time_setpoint: typing.Union[MetaOapg.properties.time_setpoint, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TachoMotor':
        return super().__new__(
            cls,
            *_args,
            commnds=commnds,
            stop_actions=stop_actions,
            count_per_rot=count_per_rot,
            duty_cycle=duty_cycle,
            duty_cycle_setpoint=duty_cycle_setpoint,
            polarity=polarity,
            position=position,
            hold_PID_kd=hold_PID_kd,
            hold_PID_ki=hold_PID_ki,
            hold_PID_kp=hold_PID_kp,
            max_speed=max_speed,
            position_setpoint=position_setpoint,
            current_speed=current_speed,
            current_speed_setpoint=current_speed_setpoint,
            current_ramp_up_setpoint=current_ramp_up_setpoint,
            current_ramp_down_setpoint=current_ramp_down_setpoint,
            speed_PID_kd=speed_PID_kd,
            speed_PID_ki=speed_PID_ki,
            speed_PID_kp=speed_PID_kp,
            state=state,
            time_setpoint=time_setpoint,
            _configuration=_configuration,
            **kwargs,
        )
