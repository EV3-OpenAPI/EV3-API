# coding: utf-8

"""
    EV3-REST

    EV3-REST  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ev3api import schemas  # noqa: F401


class LED(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            device = schemas.StrSchema
            red = schemas.IntSchema
            green = schemas.IntSchema
            __annotations__ = {
                "device": device,
                "red": red,
                "green": green,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> MetaOapg.properties.device: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["red"]) -> MetaOapg.properties.red: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["green"]) -> MetaOapg.properties.green: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device", "red", "green", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union[MetaOapg.properties.device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["red"]) -> typing.Union[MetaOapg.properties.red, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["green"]) -> typing.Union[MetaOapg.properties.green, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device", "red", "green", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device: typing.Union[MetaOapg.properties.device, str, schemas.Unset] = schemas.unset,
        red: typing.Union[MetaOapg.properties.red, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        green: typing.Union[MetaOapg.properties.green, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LED':
        return super().__new__(
            cls,
            *_args,
            device=device,
            red=red,
            green=green,
            _configuration=_configuration,
            **kwargs,
        )
